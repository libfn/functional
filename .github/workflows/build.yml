name: build

on: [push, pull_request]

jobs:
  build:
    runs-on: ubuntu-22.04
    container: fedora:39
    strategy:
      fail-fast: false
      matrix:
        platform:
        - linux
        configuration:
        - Debug
        - Release
        compiler:
        - clang
        - gcc
    steps:
    - name: Install prerequisites
      run: |
        dnf -y update
        dnf -y install git cmake ninja-build clang gcc gcc-c++ libstdc++-static
        dnf -y clean all

    # To enable submodules, git must be installed before actions/checkout@v3
    - uses: actions/checkout@v4
      with:
        submodules: 'true'

    - name: Verify compiler compatibility
      env:
        SOURCE: |
          #include <optional>
          #include <expected>
          #include <cstdio>
          int main() {
            using type1=std::expected<int, const char*>;
            using type2=std::optional<int>;
            return type1{1}.and_then([](int i) -> type1 { std::puts("OK expected"); return {i-1}; }).value()
              + type2{2}.and_then([](int i) -> type2 { std::puts("OK optional"); return {i-2}; }).value();
          }
      run: |
        FILE=$(mktemp --tmpdir XXXXXX.cpp)
        printf "$SOURCE\n" > $FILE
        OUT=$(mktemp --tmpdir  XXXXXX)
        g++ -std=c++23 -Wall $FILE -o $OUT
        $OUT

    - name: Prepare build
      env:
        CMAKE_GENERATOR: Ninja
        CC: ${{ matrix.compiler == 'gcc' && '/usr/bin/gcc' || ' /usr/bin/clang' }}
        CXX: ${{ matrix.compiler == 'gcc' && '/usr/bin/g++' || ' /usr/bin/clang++' }}
      run: |
        mkdir .build
        cd .build
        cmake -DCMAKE_BUILD_TYPE=${{ matrix.configuration }} ..
        COMPILER=$( grep "CMAKE_CXX_COMPILER:FILEPATH" CMakeCache.txt | sed "s|CMAKE_CXX_COMPILER:FILEPATH=/|/|" )
        printf "C++ compiler: %s\nC++ compiler version: %s\n" "$COMPILER" "$( $COMPILER --version | head -1 )"

    - name: Build all
      run: |
        cd .build
        ln -s ../external/catch2/src src # gcov workaround
        cmake --build . --target all

    - name: Run tests
      run: |
        cd .build
        ctest --output-on-failure
